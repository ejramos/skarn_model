function [Alpha,Rk,Xm,varargout] = make_avg_rxn_terms(Grid,Mineral,T)

%author:  Evan J. Ramos
%date:    11 Oct 2016
%updated: 21 Nov 2016

%Description: This function creates the diagonalized Alpha matrix that will
%be used in the construction of the operators for the stable isotope
%transport equations.

%Inputs:
%Grid --> structure containing all of the properties of the discrete grid
%Mineral --> strucuture containing all of the properties of the minerals,
%%%%         Fields within the structure:
%%%%         qtz 
%%%%         cal
%%%%         dol
%%%%         An40
%%%%         mus
%%%%         hbd
%%%%         bte
%%%%
%%%%         Fields within the above mineral fields:
%%%%         D
%%%%         E
%%%%         F
%%%%         Ea
%%%%         A0
%%%%         A_bar
%%%%         nu
%%%%         xm
%%%%         d18O
%%%%         phi --> Grid.N x 1 vector containing the percentage of mineral
%T --> Grid.N x 1 vector containing the temperatures in the grid (Kelvin)

%Output:
%Alpha --> Grid.N x Grid.N diagonal matrix containing average spatial alpha
%Rk    --> Grid.N x Grid.N diagonal matrix containing average spatial rk

%Constants
R = 8.3145; %[J/mol/K] gas constant

%preallocate alpha for each element
alphas = zeros(Grid.N,length(fieldnames(Mineral)));
rms    = zeros(Grid.N,length(fieldnames(Mineral)));
Abars  = zeros(Grid.N,length(fieldnames(Mineral)));
nus    = zeros(Grid.N,length(fieldnames(Mineral)));
xms    = zeros(Grid.N,length(fieldnames(Mineral)));

T(T < 273) = 273;
%compute alpha/rm for each mineral-h2o system in space
for i = 1:Grid.N
    
    alphas(i,1) = exp((Mineral.qtz.D*1e6/(T(i)^2) + Mineral.qtz.E*1e3/T(i) + Mineral.qtz.F)/1000);
    alphas(i,2) = exp((Mineral.cal.D*1e6/(T(i)^2) + Mineral.cal.E*1e3/T(i) + Mineral.cal.F)/1000);
    alphas(i,3) = exp((Mineral.dol.D*1e6/(T(i)^2) + Mineral.dol.E*1e3/T(i) + Mineral.dol.F)/1000);
    alphas(i,4) = exp((Mineral.An40.D*1e6/(T(i)^2) + Mineral.An40.E*1e3/T(i) + Mineral.An40.F)/1000);
    alphas(i,5) = exp((Mineral.mus.D*1e6/(T(i)^2) + Mineral.mus.E*1e3/T(i) + Mineral.mus.F)/1000);
    alphas(i,6) = exp((Mineral.hbd.D*1e6/(T(i)^2) + Mineral.hbd.E*1e3/T(i) + Mineral.hbd.F)/1000);
    alphas(i,7) = exp((Mineral.bte.D*1e6/(T(i)^2) + Mineral.bte.E*1e3/T(i) + Mineral.bte.F)/1000);
    
    rms(i,1)    = Mineral.qtz.A0*exp(-Mineral.qtz.Ea/(R*T(i)));
    rms(i,2)    = Mineral.cal.A0*exp(-Mineral.cal.Ea/(R*T(i)));
    rms(i,3)    = Mineral.dol.A0*exp(-Mineral.dol.Ea/(R*T(i)));
    rms(i,4)    = Mineral.An40.A0*exp(-Mineral.An40.Ea/(R*T(i)));
    rms(i,5)    = Mineral.mus.A0*exp(-Mineral.mus.Ea/(R*T(i)));
    rms(i,6)    = Mineral.hbd.A0*exp(-Mineral.hbd.Ea/(R*T(i)));
    rms(i,7)    = Mineral.bte.A0*exp(-Mineral.bte.Ea/(R*T(i)));
    
    Abars(i,1)  = Mineral.qtz.A_bar;
    Abars(i,2)  = Mineral.cal.A_bar;
    Abars(i,3)  = Mineral.dol.A_bar;
    Abars(i,4)  = Mineral.An40.A_bar;
    Abars(i,5)  = Mineral.mus.A_bar;
    Abars(i,6)  = Mineral.hbd.A_bar;
    Abars(i,7)  = Mineral.bte.A_bar;
    
    nus(i,1)    = Mineral.qtz.nu;
    nus(i,2)    = Mineral.cal.nu;
    nus(i,3)    = Mineral.dol.nu;
    nus(i,4)    = Mineral.An40.nu;
    nus(i,5)    = Mineral.mus.nu;
    nus(i,6)    = Mineral.hbd.nu;
    nus(i,7)    = Mineral.bte.nu;
    
    xms(i,1)    = Mineral.qtz.xm;
    xms(i,2)    = Mineral.cal.xm;
    xms(i,3)    = Mineral.dol.xm;
    xms(i,4)    = Mineral.An40.xm;
    xms(i,5)    = Mineral.mus.xm;
    xms(i,6)    = Mineral.hbd.xm;
    xms(i,7)    = Mineral.bte.xm;
end

%preallocate column vector for diagonal average alpha/rk matrix
alpha_avg = zeros(Grid.N,1);
rm_avg    = zeros(Grid.N,1);
Abar_avg  = zeros(Grid.N,1);
nu_avg    = zeros(Grid.N,1);
xm_avg    = zeros(Grid.N,1);

%compute average for each in space
for i = 1:Grid.N
    alpha_avg(i) = Mineral.qtz.phi(i)*alphas(i,1) + ...
                   Mineral.cal.phi(i)*alphas(i,2) + ...
                   Mineral.dol.phi(i)*alphas(i,3) + ...
                   Mineral.An40.phi(i)*alphas(i,4) + ...
                   Mineral.mus.phi(i)*alphas(i,5) + ...
                   Mineral.hbd.phi(i)*alphas(i,6) + ...
                   Mineral.bte.phi(i)*alphas(i,7);
    rm_avg(i)    = Mineral.qtz.phi(i)*rms(i,1) + ...
                   Mineral.cal.phi(i)*rms(i,2) + ...
                   Mineral.dol.phi(i)*rms(i,3) + ...
                   Mineral.An40.phi(i)*rms(i,4) + ...
                   Mineral.mus.phi(i)*rms(i,5) + ...
                   Mineral.hbd.phi(i)*rms(i,6) + ...
                   Mineral.bte.phi(i)*rms(i,7);
    Abar_avg(i)  = Mineral.qtz.phi(i)*Abars(i,1) + ...
                   Mineral.cal.phi(i)*Abars(i,2) + ...
                   Mineral.dol.phi(i)*Abars(i,3) + ...
                   Mineral.An40.phi(i)*Abars(i,4) + ...
                   Mineral.mus.phi(i)*Abars(i,5) + ...
                   Mineral.hbd.phi(i)*Abars(i,6) + ...
                   Mineral.bte.phi(i)*Abars(i,7);
    nu_avg(i)    = Mineral.qtz.phi(i)*nus(i,1) + ...
                   Mineral.cal.phi(i)*nus(i,2) + ...
                   Mineral.dol.phi(i)*nus(i,3) + ...
                   Mineral.An40.phi(i)*nus(i,4) + ...
                   Mineral.mus.phi(i)*nus(i,5) + ...
                   Mineral.hbd.phi(i)*nus(i,6) + ...
                   Mineral.bte.phi(i)*nus(i,7);
    xm_avg(i)    = Mineral.qtz.phi(i)*xms(i,1) + ...
                   Mineral.cal.phi(i)*xms(i,2) + ...
                   Mineral.dol.phi(i)*xms(i,3) + ...
                   Mineral.An40.phi(i)*xms(i,4) + ...
                   Mineral.mus.phi(i)*xms(i,5) + ...
                   Mineral.hbd.phi(i)*xms(i,6) + ...
                   Mineral.bte.phi(i)*xms(i,7);
end

Alpha = spdiags(alpha_avg,0,Grid.N,Grid.N);
Rk    = spdiags(rm_avg.*Abar_avg./nu_avg,0,Grid.N,Grid.N);
Xm    = spdiags(xm_avg,0,Grid.N,Grid.N);

%%%% If there is a fourth variable assigned as output, then the oxygen
%%%% isotope value of the fluid is returned.

if nargout == 5
    
    delta_ws = zeros(Grid.N,length(fieldnames(Mineral)));
    
    for i = 1:Grid.N
        [~, delta_ws(i,1)] = stable_isotope(...
                                            Mineral.qtz.D,...
                                            Mineral.qtz.E,...
                                            Mineral.qtz.F,...
                                            T(i),...
                                            Mineral.qtz.d18O,...
                                            'num');
        [~, delta_ws(i,2)] = stable_isotope(...
                                            Mineral.cal.D,...
                                            Mineral.cal.E,...
                                            Mineral.cal.F,...
                                            T(i),...
                                            Mineral.cal.d18O,...
                                            'num');
        [~, delta_ws(i,3)] = stable_isotope(...
                                            Mineral.dol.D,...
                                            Mineral.dol.E,...
                                            Mineral.dol.F,...
                                            T(i),...
                                            Mineral.dol.d18O,...
                                            'num');
        [~, delta_ws(i,4)] = stable_isotope(...
                                            Mineral.An40.D,...
                                            Mineral.An40.E,...
                                            Mineral.An40.F,...
                                            T(i),...
                                            Mineral.An40.d18O,...
                                            'num');
        [~, delta_ws(i,5)] = stable_isotope(...
                                            Mineral.mus.D,...
                                            Mineral.mus.E,...
                                            Mineral.mus.F,...
                                            T(i),...
                                            Mineral.mus.d18O,...
                                            'num');
        [~, delta_ws(i,6)] = stable_isotope(...
                                            Mineral.hbd.D,...
                                            Mineral.hbd.E,...
                                            Mineral.hbd.F,...
                                            T(i),...
                                            Mineral.hbd.d18O,...
                                            'num');
        [~, delta_ws(i,7)] = stable_isotope(...
                                            Mineral.bte.D,...
                                            Mineral.bte.E,...
                                            Mineral.bte.F,...
                                            T(i),...
                                            Mineral.bte.d18O,...
                                            'num');
    end
    
    varargout{1} = zeros(Grid.N,1); %average delta_w
    varargout{2} = zeros(Grid.N,1); %average delta_l
    
    for i = 1:Grid.N
        varargout{1}(i) = Mineral.qtz.phi(i)*delta_ws(i,1) + ...
                          Mineral.cal.phi(i)*delta_ws(i,2) + ...
                          Mineral.dol.phi(i)*delta_ws(i,3) + ...
                          Mineral.An40.phi(i)*delta_ws(i,4) + ...
                          Mineral.mus.phi(i)*delta_ws(i,5) + ...
                          Mineral.hbd.phi(i)*delta_ws(i,6) + ...
                          Mineral.bte.phi(i)*delta_ws(i,7);
        varargout{2}(i) = Mineral.qtz.phi(i)*Mineral.qtz.d18O + ...
                          Mineral.cal.phi(i)*Mineral.cal.d18O + ...
                          Mineral.dol.phi(i)*Mineral.dol.d18O + ...
                          Mineral.An40.phi(i)*Mineral.An40.d18O + ...
                          Mineral.mus.phi(i)*Mineral.mus.d18O + ...
                          Mineral.hbd.phi(i)*Mineral.hbd.d18O + ...
                          Mineral.bte.phi(i)*Mineral.bte.d18O;
    end

    
end

end